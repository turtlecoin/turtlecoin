name: Build
on:
  push:
  pull_request:
  release:
    types: [published]

env:
  TAG: ${{ github.ref }}

jobs:
  # Common Build matrix for builds on Ubuntu VM
  ubuntu_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu GCC 7', 'Ubuntu GCC 8', 'Ubuntu Clang 6', 'aarch64']
        include:
          - build_name: 'Ubuntu GCC 7'
            package_name: 'gcc-7 g++-7'
            cc: gcc-7
            cxx: g++-7
            label: linux-g++-7
            deployable: false
          - build_name: 'Ubuntu GCC 8'
            package_name: 'gcc-8 g++-8'
            cc: gcc-8
            cxx: g++-8
            label: linux
            deployable: true
          - build_name: 'Ubuntu Clang 6'
            cc: clang-6.0
            cxx: clang++-6.0
            label: linux-clang-6
            deployable: false
          - build_name: 'aarch64'
            label: aarch64
            deployable: true
    env:
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v1

      # Fetch Dependencies
      - name: Dependencies
        if: matrix.build_name != 'aarch64'
        run: |
          sudo apt update
          sudo apt install -y libboost-all-dev libssl-dev ${{ matrix.package_name }}
      
      # Configure the project with cmake
      - name: Configure
        if: matrix.build_name != 'aarch64'
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
      
      # Build for linux
      - name: Build
        if: matrix.build_name != 'aarch64'
        run: |
          cd build
          make -j2

      # Build for aarch64
      - name: Prepare and Build (aarch64)
        if: matrix.build_name == 'aarch64'
        run: |
          source scripts/prep-aarch64.sh
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
          make -j2
          cd src
          TARGETS="TurtleCoind miner zedwallet turtle-service zedwallet-beta cryptotest wallet-api wallet-upgrader"
          ${STRIP} ${TARGETS}
      
      # Test the crypto
      - name: Test Crypto
        if: matrix.build_name != 'aarch64'
        run: |
          cd build/src
          ./cryptotest
      
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="TurtleCoind miner zedwallet turtle-service zedwallet-beta cryptotest wallet-api wallet-upgrader"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf turtlecoin-${TAG}
          mkdir turtlecoin-${TAG}
          cp ${TARGETS} turtlecoin-${TAG}/
          cp ../../LICENSE turtlecoin-${TAG}/
          tar cvfz turtlecoin-${TAG}-${LABEL}.tar.gz turtlecoin-${TAG}/
          rm -rf builds
          mkdir builds
          cp turtlecoin-${TAG}-${LABEL}.tar.gz builds
          echo ::set-output name=file_name::turtlecoin-${TAG}-${LABEL}.tar.gz
      
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && github.repository == 'turtlecoin/turtlecoin' && matrix.deployable
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/zip
      
      # Upload to S3
      - name: Upload to S3
        if: github.event_name != 'pull_request' && github.repository == 'turtlecoin/turtlecoin'
        uses: opspresso/action-s3-sync@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-2"
          FROM_PATH: "build/src/builds"
          DEST_PATH: "s3://turtlecoin/turtlecoin/"
          OPTIONS: "--acl public-read"


  # Mac builds on Mojave VM
  macos_build:
    name: macOS
    runs-on: macOS-10.14
    env:
      CC: /usr/local/opt/llvm@8/bin/clang
      CXX: /usr/local/opt/llvm@8/bin/clang++
      LABEL: osx
    steps:
      - uses: actions/checkout@v1
      
      # Fetch Dependencies
      - name: Dependencies
        run: |
          brew install --force boost llvm@8
          brew link --force llvm@8
          ln -s /usr/local/opt/llvm@8 /usr/local/opt/llvm
      
      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
      
      # Build for macOS
      - name: Build
        run: |
          cd build
          make -j2
      
      # Test the crypto
      - name: Test Crypto
        run: |
          cd build/src
          ./cryptotest
      
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="TurtleCoind miner zedwallet turtle-service zedwallet-beta cryptotest wallet-api wallet-upgrader"
          strip ${TARGETS}
          rm -rf turtlecoin-${TAG}
          mkdir turtlecoin-${TAG}
          cp ${TARGETS} turtlecoin-${TAG}/
          cp ../../LICENSE turtlecoin-${TAG}/
          tar cvfz turtlecoin-${TAG}-${LABEL}.tar.gz turtlecoin-${TAG}/
          rm -rf builds
          mkdir builds
          cp turtlecoin-${TAG}-${LABEL}.tar.gz builds
          echo ::set-output name=file_name::turtlecoin-${TAG}-${LABEL}.tar.gz
      

      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && github.repository == 'turtlecoin/turtlecoin'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/zip
      
      # Upload to S3
      - name: Upload to S3
        if: github.event_name != 'pull_request' && github.repository == 'turtlecoin/turtlecoin'
        uses: opspresso/action-s3-sync@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-2"
          FROM_PATH: "build/src/builds"
          DEST_PATH: "s3://turtlecoin/turtlecoin/"
          OPTIONS: "--acl public-read"

  # Windows Builds on Windows Server 2019
  windows_build:
    name: Windows
    runs-on: windows-2019
    env:
      MSBUILD_PATH: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin"
      LABEL: windows
    steps:
      - uses: actions/checkout@v1

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -G "Visual Studio 16 2019" -A x64 .. -DARCH=default
      
      # Build for Windows
      - name: Build
        run: |
          set PATH=%MSBUILD_PATH%;%PATH%
          cd build
          MSBuild TurtleCoin.sln /p:Configuration=Release /m
      
      # Test the crypto
      - name: Test Crypto
        shell: bash
        run: |
          cd build/src/Release
          ./cryptotest.exe
      
      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src/Release
          rm -rf turtlecoin-${TAG}
          mkdir turtlecoin-${TAG}
          cp *.exe turtlecoin-${TAG}/
          cp ../../../LICENSE turtlecoin-${TAG}/
          7z a turtlecoin-${TAG}-${LABEL}.zip turtlecoin-${TAG}/
          rm -rf builds
          mkdir builds
          cp turtlecoin-${TAG}-${LABEL}.zip builds
          echo ::set-output name=file_name::turtlecoin-${TAG}-${LABEL}.zip
      

      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && github.repository == 'turtlecoin/turtlecoin'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/zip
      
      # Upload to S3
      - name: Upload to S3
        if: github.event_name != 'pull_request' && github.repository == 'turtlecoin/turtlecoin'
        uses: opspresso/action-s3-sync@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-2"
          FROM_PATH: "build/src/Release/builds"
          DEST_PATH: "s3://turtlecoin/turtlecoin/"
          OPTIONS: "--acl public-read"
